{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar DefaultCanvasSize = 16;\nvar linkElements = [];\nvar drawAlert = function drawAlert(context, _ref) {\n  var fillColor = _ref.fillColor,\n    text = _ref.text,\n    textColor = _ref.textColor,\n    canvasSize = _ref.canvasSize;\n  var Padding = canvasSize / 5;\n  context.font = \"bold \" + (canvasSize - Padding * 2) + \"px arial\";\n  var w = Math.min(context.measureText(text).width, canvasSize - Padding) + Padding;\n  var x = canvasSize - w;\n  var y = canvasSize / 2 - Padding;\n  var h = Padding + canvasSize / 2;\n  var r = Math.min(w / 2, h / 2);\n  context.beginPath();\n  context.moveTo(x + r, y);\n  context.arcTo(x + w, y, x + w, y + h, r);\n  context.arcTo(x + w, y + h, x, y + h, r);\n  context.arcTo(x, y + h, x, y, r);\n  context.arcTo(x, y, x + w, y, r);\n  context.closePath();\n  context.fillStyle = fillColor;\n  context.fill();\n  context.fillStyle = textColor;\n  context.textBaseline = 'bottom';\n  context.textAlign = 'right';\n  context.fillText(text, canvasSize - Padding / 2, canvasSize, canvasSize - Padding);\n};\nfunction drawIcon(_ref2) {\n  var alertCount = _ref2.alertCount,\n    alertFillColor = _ref2.alertFillColor,\n    alertTextColor = _ref2.alertTextColor,\n    callback = _ref2.callback,\n    renderOverlay = _ref2.renderOverlay,\n    src = _ref2.url,\n    canvasSize = _ref2.canvasSize;\n  var img = document.createElement('img');\n  img.crossOrigin = 'Anonymous';\n  img.onload = function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = canvasSize;\n    canvas.height = canvasSize;\n    var context = canvas.getContext('2d');\n    context.clearRect(0, 0, img.width, img.height);\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    if (alertCount) {\n      drawAlert(context, {\n        fillColor: alertFillColor,\n        textColor: alertTextColor,\n        text: alertCount,\n        canvasSize: canvasSize\n      });\n    }\n    if (renderOverlay) {\n      renderOverlay(canvas, context);\n    }\n    callback(context.canvas.toDataURL());\n  };\n  img.src = src;\n}\nvar Favicon = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Favicon, _React$Component);\n  function Favicon() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      animationIndex: 0,\n      animationLoop: null,\n      animationRunning: false\n    };\n    return _this;\n  }\n  Favicon.getActiveInstance = function getActiveInstance() {\n    return Favicon.mountedInstances[Favicon.mountedInstances.length - 1];\n  };\n  Favicon.draw = function draw() {\n    if (typeof document === 'undefined') return;\n    var activeInstance = Favicon.getActiveInstance();\n    if (linkElements.length === 0) {\n      var head = document.getElementsByTagName('head')[0];\n      var linkEl = document.createElement('link');\n      linkEl.type = 'image/x-icon';\n      linkEl.rel = 'icon';\n      var linkApple = document.createElement('link');\n      linkApple.rel = 'apple-touch-icon';\n      linkElements.push(linkEl, linkApple);\n      var links = head.getElementsByTagName('link');\n      for (var i = links.length; --i >= 0;) {\n        if (/\\bicon\\b/i.test(links[i].getAttribute('rel')) && !activeInstance.props.keepIconLink(links[i])) {\n          head.removeChild(links[i]);\n        }\n      }\n      linkElements.forEach(function (el) {\n        return head.appendChild(el);\n      });\n    }\n    var currentUrl;\n    if (activeInstance.props.url instanceof Array) {\n      currentUrl = activeInstance.props.url[activeInstance.state.animationIndex];\n    } else {\n      currentUrl = activeInstance.props.url;\n    }\n    if (activeInstance.props.alertCount || activeInstance.props.renderOverlay) {\n      drawIcon({\n        alertCount: activeInstance.props.alertCount,\n        alertFillColor: activeInstance.props.alertFillColor,\n        alertTextColor: activeInstance.props.alertTextColor,\n        callback: function callback(url) {\n          linkElements.forEach(function (el) {\n            return el.href = url;\n          });\n        },\n        renderOverlay: activeInstance.props.renderOverlay,\n        url: currentUrl,\n        canvasSize: activeInstance.props.iconSize\n      });\n    } else {\n      linkElements.forEach(function (el) {\n        return el.href = currentUrl;\n      });\n    }\n  };\n  Favicon.update = function update() {\n    if (typeof document === 'undefined') return;\n    var activeInstance = Favicon.getActiveInstance();\n    var isAnimated = activeInstance.props.url instanceof Array && activeInstance.props.animated;\n    var intervalId = null;\n    clearInterval(activeInstance.state.animationLoop);\n    if (isAnimated) {\n      var animateFavicon = function animateFavicon() {\n        var nextAnimationIndex = (activeInstance.state.animationIndex + 1) % activeInstance.props.url.length;\n        Favicon.draw();\n        activeInstance.setState({\n          animationIndex: nextAnimationIndex\n        });\n      };\n      intervalId = setInterval(animateFavicon, activeInstance.props.animationDelay);\n      animateFavicon();\n    } else {\n      Favicon.draw();\n    }\n    activeInstance.setState({\n      animationLoop: intervalId\n    });\n  };\n  var _proto = Favicon.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    Favicon.mountedInstances.push(this);\n    Favicon.update();\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var activeInstance = Favicon.getActiveInstance();\n    clearInterval(activeInstance.state.animationLoop);\n  };\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.url === this.props.url && prevProps.animated === this.props.animated && prevProps.alertCount === this.props.alertCount && prevProps.alertFillColor === this.props.alertFillColor && prevProps.alertTextColor === this.props.alertTextColor && prevProps.renderOverlay === this.props.renderOverlay && prevProps.keepIconLink === this.props.keepIconLink && prevProps.iconSize === this.props.iconSize) return;\n    Favicon.update();\n  };\n  _proto.render = function render() {\n    return null;\n  };\n  return Favicon;\n}(React.Component);\nFavicon.displayName = 'Favicon';\nFavicon.mountedInstances = [];\nFavicon.defaultProps = {\n  iconSize: DefaultCanvasSize,\n  alertCount: null,\n  alertFillColor: 'red',\n  alertTextColor: 'white',\n  animated: true,\n  animationDelay: 500,\n  keepIconLink: function keepIconLink() {\n    return false;\n  },\n  renderOverlay: null,\n  url: null\n};\nFavicon.propTypes = {\n  iconSize: PropTypes.number,\n  alertCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  alertFillColor: PropTypes.string,\n  alertTextColor: PropTypes.string,\n  animated: PropTypes.bool,\n  animationDelay: PropTypes.number,\n  keepIconLink: PropTypes.func,\n  renderOverlay: PropTypes.func,\n  url: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]).isRequired\n};\nmodule.exports = Favicon;","map":null,"metadata":{},"sourceType":"script"}