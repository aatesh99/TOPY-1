{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { MixedType } from './MixedType';\nfunction toNumber(value) {\n  return +value;\n}\nexport var NumberType = /*#__PURE__*/function (_MixedType) {\n  _inheritsLoose(NumberType, _MixedType);\n  function NumberType(errorMessage) {\n    var _this;\n    _this = _MixedType.call(this, 'number') || this;\n    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {\n      onValid: function onValid(value) {\n        return /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + '');\n      },\n      errorMessage: errorMessage || _this.locale.type\n    });\n    return _this;\n  }\n  var _proto = NumberType.prototype;\n  _proto.isInteger = function isInteger(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isInteger;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return /^-?\\d+$/.test(value + '');\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.pattern = function pattern(regexp, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.pattern;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return regexp.test(value + '');\n      },\n      errorMessage: errorMessage,\n      params: {\n        regexp: regexp\n      }\n    });\n    return this;\n  };\n  _proto.isOneOf = function isOneOf(values, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isOneOf;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return values.includes(toNumber(value));\n      },\n      errorMessage: errorMessage,\n      params: {\n        values: values\n      }\n    });\n    return this;\n  };\n  _proto.range = function range(min, max, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.range;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return toNumber(value) >= min && toNumber(value) <= max;\n      },\n      errorMessage: errorMessage,\n      params: {\n        min: min,\n        max: max\n      }\n    });\n    return this;\n  };\n  _proto.min = function min(_min, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.min;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return toNumber(value) >= _min;\n      },\n      errorMessage: errorMessage,\n      params: {\n        min: _min\n      }\n    });\n    return this;\n  };\n  _proto.max = function max(_max, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.max;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return toNumber(value) <= _max;\n      },\n      errorMessage: errorMessage,\n      params: {\n        max: _max\n      }\n    });\n    return this;\n  };\n  return NumberType;\n}(MixedType);\nexport default function getNumberType(errorMessage) {\n  return new NumberType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}