{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { mergeRefs, PLACEMENT_8, placementPolyfill, useClassNames } from '../utils';\nimport { SidenavContext } from './Sidenav';\nimport deprecatePropType from '../utils/deprecatePropType';\nimport Menu from '../Menu/Menu';\nimport MenuItem from '../Menu/MenuItem';\nimport kebabCase from 'lodash/kebabCase';\nimport ExpandedSidenavDropdown from './ExpandedSidenavDropdown';\nimport NavContext from '../Nav/NavContext';\nimport NavDropdownItem from '../Nav/NavDropdownItem';\nimport NavDropdownMenu from '../Nav/NavDropdownMenu';\nimport SidenavDropdownToggle from './SidenavDropdownToggle';\nimport { NavMenuContext } from '../Nav/NavMenu';\n\n/**\n * @private this component is not supposed to be used directly\n *          Instead it's rendered by a <Nav.Menu> within a <Sidenav>\n *\n * <Sidenav>\n *   <Nav>\n *     <Nav.Menu> -> This submenu will render <SidenavDropdown> component\n *     </Nav.Menu>\n *   </Nav>\n * </Sidenav>\n */\nvar SidenavDropdown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var sidenav = useContext(SidenavContext);\n  var nav = useContext(NavContext);\n  var navMenu = useContext(NavMenuContext);\n  if (!sidenav || !nav || !navMenu) {\n    throw new Error('<Sidenav.Dropdown> must be rendered within a <Nav> component within a <Sidenav> component.');\n  }\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    title = props.title,\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    onToggle = props.onToggle,\n    eventKey = props.eventKey,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? 'click' : _props$trigger,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    toggleAs = props.toggleAs,\n    toggleClassName = props.toggleClassName,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'dropdown' : _props$classPrefix,\n    className = props.className,\n    disabled = props.disabled,\n    children = props.children,\n    menuStyle = props.menuStyle,\n    style = props.style,\n    toggleProps = _objectWithoutPropertiesLoose(props, [\"as\", \"title\", \"onClose\", \"onOpen\", \"onToggle\", \"eventKey\", \"trigger\", \"placement\", \"toggleAs\", \"toggleClassName\", \"classPrefix\", \"className\", \"disabled\", \"children\", \"menuStyle\", \"style\"]);\n  var _useClassNames = useClassNames(classPrefix),\n    merge = _useClassNames.merge,\n    withClassPrefix = _useClassNames.withClassPrefix,\n    prefix = _useClassNames.prefix;\n  var _useClassNames2 = useClassNames('dropdown-menu'),\n    withMenuClassPrefix = _useClassNames2.withClassPrefix,\n    mergeMenuClassName = _useClassNames2.merge;\n  var _useClassNames3 = useClassNames('nav-item'),\n    withNavItemClassPrefix = _useClassNames3.withClassPrefix,\n    mergeNavItemClassNames = _useClassNames3.merge;\n  var items = navMenu[0].items;\n  var hasSelectedItems =\n  // has items that is active indicated by <Nav activeKey>\n  nav.activeKey && items.some(function (item) {\n    return item.eventKey === nav.activeKey;\n  }) ||\n  // has items that is active indicated by <Nav.Item active>\n  items.some(function (item) {\n    return item.active;\n  });\n  var menuButtonTriggers = useMemo(function () {\n    if (!trigger) {\n      return undefined;\n    }\n    var triggerMap = {\n      hover: 'mouseover',\n      click: 'click',\n      contextMenu: 'contextmenu'\n    };\n    if (!Array.isArray(trigger)) {\n      return [triggerMap[trigger]];\n    }\n    return trigger.map(function (t) {\n      return triggerMap[t];\n    });\n  }, [trigger]); // Render a disclosure when inside expanded <Sidenav>\n\n  if (sidenav.expanded) {\n    return /*#__PURE__*/React.createElement(ExpandedSidenavDropdown, _extends({\n      ref: ref\n    }, props));\n  }\n  var renderMenuButton = function renderMenuButton(menuButtonProps, buttonRef) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: disabled\n    }, function (_ref, menuitemRef) {\n      var active = _ref.active,\n        menuitemProps = _objectWithoutPropertiesLoose(_ref, [\"active\"]);\n      return /*#__PURE__*/React.createElement(SidenavDropdownToggle, _extends({\n        ref: mergeRefs(buttonRef, menuitemRef),\n        as: toggleAs,\n        className: mergeNavItemClassNames(toggleClassName, withNavItemClassPrefix({\n          focus: active\n        }))\n      }, menuButtonProps, omit(menuitemProps, ['onClick']), omit(toggleProps, 'data-testid')), title);\n    });\n  };\n  return /*#__PURE__*/React.createElement(Menu, {\n    menuButtonText: title,\n    renderMenuButton: renderMenuButton,\n    openMenuOn: menuButtonTriggers,\n    renderMenuPopup: function renderMenuPopup(_ref2, popupRef) {\n      var open = _ref2.open,\n        popupProps = _objectWithoutPropertiesLoose(_ref2, [\"open\"]);\n      var menuClassName = mergeMenuClassName(className, withMenuClassPrefix({})); // When inside a collapsed <Sidenav>, render a header in menu\n\n      var showHeader = !!sidenav;\n      return /*#__PURE__*/React.createElement(\"ul\", _extends({\n        ref: popupRef,\n        className: menuClassName,\n        style: menuStyle,\n        hidden: !open\n      }, popupProps), showHeader && /*#__PURE__*/React.createElement(\"div\", {\n        className: prefix('header')\n      }, title), children);\n    },\n    onToggleMenu: function onToggleMenu(open, event) {\n      onToggle === null || onToggle === void 0 ? void 0 : onToggle(open, eventKey, event);\n      sidenav === null || sidenav === void 0 ? void 0 : sidenav.onOpenChange(eventKey, event);\n      if (open) {\n        onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n      } else {\n        onClose === null || onClose === void 0 ? void 0 : onClose();\n      }\n    }\n  }, function (_ref3, menuContainerRef) {\n    var _withClassPrefix;\n    var open = _ref3.open,\n      menuContainer = _objectWithoutPropertiesLoose(_ref3, [\"open\"]);\n    var classes = merge(className, withClassPrefix((_withClassPrefix = {}, _withClassPrefix[\"placement-\" + kebabCase(placementPolyfill(placement))] = !!placement, _withClassPrefix.disabled = disabled, _withClassPrefix.open = open, _withClassPrefix.submenu = true, _withClassPrefix['selected-within'] = hasSelectedItems, _withClassPrefix)));\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      ref: mergeRefs(ref, menuContainerRef),\n      className: classes\n    }, menuContainer, pick(toggleProps, ['data-testid']), {\n      style: style\n    }));\n  });\n});\nSidenavDropdown.Item = NavDropdownItem;\nSidenavDropdown.Menu = NavDropdownMenu;\nSidenavDropdown.displayName = 'Sidenav.Dropdown';\nSidenavDropdown.propTypes = {\n  activeKey: PropTypes.any,\n  classPrefix: PropTypes.string,\n  trigger: PropTypes.oneOfType([PropTypes.array, PropTypes.oneOf(['click', 'hover', 'contextMenu'])]),\n  placement: PropTypes.oneOf(PLACEMENT_8),\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n  icon: PropTypes.node,\n  menuStyle: PropTypes.object,\n  className: PropTypes.string,\n  toggleClassName: PropTypes.string,\n  children: PropTypes.node,\n  open: deprecatePropType(PropTypes.bool),\n  eventKey: PropTypes.any,\n  as: PropTypes.elementType,\n  toggleAs: PropTypes.elementType,\n  noCaret: PropTypes.bool,\n  style: PropTypes.object,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  onToggle: PropTypes.func,\n  onSelect: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onClick: PropTypes.func,\n  renderToggle: PropTypes.func\n};\nexport default SidenavDropdown;","map":null,"metadata":{},"sourceType":"module"}