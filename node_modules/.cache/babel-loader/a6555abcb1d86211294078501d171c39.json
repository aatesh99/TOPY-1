{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { MixedType } from './MixedType';\nexport var StringType = /*#__PURE__*/function (_MixedType) {\n  _inheritsLoose(StringType, _MixedType);\n  function StringType(errorMessage) {\n    var _this;\n    _this = _MixedType.call(this, 'string') || this;\n    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {\n      onValid: function onValid(v) {\n        return typeof v === 'string';\n      },\n      errorMessage: errorMessage || _this.locale.type\n    });\n    return _this;\n  }\n  var _proto = StringType.prototype;\n  _proto.containsLetter = function containsLetter(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.containsLetter;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return /[a-zA-Z]/.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.containsUppercaseLetter = function containsUppercaseLetter(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.containsUppercaseLetter;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return /[A-Z]/.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.containsLowercaseLetter = function containsLowercaseLetter(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.containsLowercaseLetter;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return /[a-z]/.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.containsLetterOnly = function containsLetterOnly(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.containsLetterOnly;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return /^[a-zA-Z]+$/.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.containsNumber = function containsNumber(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.containsNumber;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return /[0-9]/.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.isOneOf = function isOneOf(values, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isOneOf;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return !!~values.indexOf(v);\n      },\n      errorMessage: errorMessage,\n      params: {\n        values: values\n      }\n    });\n    return this;\n  };\n  _proto.isEmail = function isEmail(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isEmail;\n    }\n\n    // http://emailregex.com/\n    var regexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return regexp.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.isURL = function isURL(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isURL;\n    }\n    var regexp = new RegExp(\"^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$\", 'i');\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return regexp.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.isHex = function isHex(errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.isHex;\n    }\n    var regexp = /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i;\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return regexp.test(v);\n      },\n      errorMessage: errorMessage\n    });\n    return this;\n  };\n  _proto.pattern = function pattern(regexp, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.pattern;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(v) {\n        return regexp.test(v);\n      },\n      errorMessage: errorMessage,\n      params: {\n        regexp: regexp\n      }\n    });\n    return this;\n  };\n  _proto.rangeLength = function rangeLength(minLength, maxLength, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.rangeLength;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return value.length >= minLength && value.length <= maxLength;\n      },\n      errorMessage: errorMessage,\n      params: {\n        minLength: minLength,\n        maxLength: maxLength\n      }\n    });\n    return this;\n  };\n  _proto.minLength = function minLength(_minLength, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.minLength;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return Array.from(value).length >= _minLength;\n      },\n      errorMessage: errorMessage,\n      params: {\n        minLength: _minLength\n      }\n    });\n    return this;\n  };\n  _proto.maxLength = function maxLength(_maxLength, errorMessage) {\n    if (errorMessage === void 0) {\n      errorMessage = this.locale.maxLength;\n    }\n    _MixedType.prototype.pushRule.call(this, {\n      onValid: function onValid(value) {\n        return Array.from(value).length <= _maxLength;\n      },\n      errorMessage: errorMessage,\n      params: {\n        maxLength: _maxLength\n      }\n    });\n    return this;\n  };\n  return StringType;\n}(MixedType);\nexport default function getStringType(errorMessage) {\n  return new StringType(errorMessage);\n}","map":null,"metadata":{},"sourceType":"module"}