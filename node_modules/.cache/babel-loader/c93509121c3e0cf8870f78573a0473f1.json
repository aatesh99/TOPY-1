{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\nimport canUseDOM from 'dom-lib/canUseDOM';\nvar MountedPortal = /*#__PURE__*/React.memo(function (_ref) {\n  var children = _ref.children,\n    container = _ref.container;\n  var _useState = useState(false),\n    mounted = _useState[0],\n    setMounted = _useState[1];\n  useEffect(function () {\n    return setMounted(true);\n  }, []);\n  if (container && mounted) {\n    return /*#__PURE__*/createPortal(children, container);\n  }\n  return null;\n});\nfunction usePortal(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    container = _props.container,\n    _props$waitMount = _props.waitMount,\n    waitMount = _props$waitMount === void 0 ? false : _props$waitMount;\n  var rootElemRef = useRef(canUseDOM ? document.body : null);\n  useEffect(function () {\n    var containerElement = typeof container === 'function' ? container() : container; // Parent is either a new root or the existing dom element\n\n    var parentElement = containerElement || document.body;\n    rootElemRef.current = parentElement;\n  }, [rootElemRef, container]);\n  var Portal = useCallback(function (_ref2) {\n    var children = _ref2.children;\n    return rootElemRef.current != null ? /*#__PURE__*/createPortal(children, rootElemRef.current) : null;\n  }, []);\n  var WaitMountPortal = useCallback(function (props) {\n    return /*#__PURE__*/React.createElement(MountedPortal, _extends({\n      container: rootElemRef.current\n    }, props));\n  }, []);\n  return {\n    target: rootElemRef.current,\n    Portal: waitMount ? WaitMountPortal : Portal\n  };\n}\nexport default usePortal;","map":null,"metadata":{},"sourceType":"module"}